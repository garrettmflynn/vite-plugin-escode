import { parse } from "@babel/parser";
import babelGenerator from "@babel/generator";
const generate = babelGenerator.default

import fs from 'node:fs'
import { getCircularReplacer } from "./utils";
import options from "../../options";
// import { getCircularReplacer } from './utils';

const fileRegex = /\.(flow)$/

export default function escodeVitePlugin() {
    const virtualModuleId = 'virtual:escode'
    const resolvedVirtualModuleId = '\0' + virtualModuleId

    return {
        name: 'escode', // required, will show up in warnings and errors

        // Once on Server Start
        options: () => {

        },

        buildStart: () => {
            
        },

        transformIndexHtml(html) {
            return html.replace(
              /<title>(.*?)<\/title>/,
              `<title>Title replaced!</title>`,
            )
          },

        //   handleHotUpdate({ server }) {
        //     server.ws.send({
        //       type: 'custom',
        //       event: 'escode:hot-update',
        //       data: {}
        //     })

        //     return []
        //   },

        // Each Incoming Module Request
        resolveId(id) {
            if (id === virtualModuleId) {
                return resolvedVirtualModuleId
            }
        },

        load(id) {
            if (id === resolvedVirtualModuleId) {
                return `
                export const msg = "from virtual module"

                if (import.meta.hot) {
                    import.meta.hot.on('escode:hot-update', (data) => {
                        console.warn('HOT Update', data)
                    })

                    import.meta.hot.on('escode:from-server', (data) => {
                        console.log(data.msg) // hello
                    })

                    import.meta.hot.send('escode:from-client', { msg: 'Hey!' })
                }
                
                `
            }
        },

        transform(source, id) {
            if (fileRegex.test(id)) {

                // // Create AST from multiple files
                // const a = "var a = 1;";
                // const b = "var b = 2;";
                // const astA = parse(a, { sourceFilename: "a.js" });
                // const astB = parse(b, { sourceFilename: "b.js" });
                // const ast = {
                //     type: "Program",
                //     body: [].concat(astA.program.body, astB.program.body),
                // };


                const { program: ast } = parse(source, options)


                // Print out the configuration files that are generated by the AST parsers
                fs.writeFileSync('./tmp/ast.json',  JSON.stringify(ast, null, 2))
                
                // return generate(
                //     ast,
                //     { 
                //         sourceMaps: true,
                //         minified: true
                //     },
                //     source
                // )

                return {
                    code: source,
                    map: null, // provide source map if available
                }
            }
        },

        // Server Closed
        buildEnd: () => {

        
        },

        closeBundle: () => {

        },

        // Server Communication
        configureServer(server) {
            
            // Example: wait for a client to connect before sending a message
            server.ws.on('connection', () => {
              server.ws.send('escode:from-server', { msg: 'hello' })
            })

            server.ws.on('escode:from-client', (data, client) => {
                console.log('Message from client:', data.msg) // Hey!
                // reply only to the client (if needed)
                client.send('escode:from-server', { msg: 'Hi! I got your message!' })
              })
          },
    }
}